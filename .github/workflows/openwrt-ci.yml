#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI

on:
  push:
    branches: 
      - master
  # schedule:
  #   - cron: 0 20 * * *
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir
          # ln -s -f /mnt/openwrt/build_dir/host ./build_dir/host
          # ln -s -f /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir
          df -h
      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config
          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:
          cat >> .config <<EOF
          CONFIG_MODULES=y
          CONFIG_HAVE_DOT_CONFIG=y
          CONFIG_HOST_OS_LINUX=y
          CONFIG_TARGET_ramips=y
          CONFIG_TARGET_ramips_mt7621=y
          CONFIG_TARGET_MULTI_PROFILE=y
          CONFIG_HAS_SUBTARGETS=y
          CONFIG_HAS_DEVICES=y
          CONFIG_TARGET_BOARD="ramips"
          CONFIG_TARGET_SUBTARGET="mt7621"
          CONFIG_TARGET_ARCH_PACKAGES="mipsel_24kc"
          CONFIG_DEFAULT_TARGET_OPTIMIZATION="-Os -pipe -mno-branch-likely -mips32r2 -mtune=24kc"
          CONFIG_CPU_TYPE="24kc"
          CONFIG_LINUX_5_10=y
          CONFIG_AUDIO_SUPPORT=y
          CONFIG_GPIO_SUPPORT=y
          CONFIG_PCI_SUPPORT=y
          CONFIG_USB_SUPPORT=y
          CONFIG_RTC_SUPPORT=y
          CONFIG_USES_DEVICETREE=y
          CONFIG_USES_INITRAMFS=y
          CONFIG_USES_SQUASHFS=y
          CONFIG_USES_MINOR=y
          CONFIG_HAS_MIPS16=y
          CONFIG_NAND_SUPPORT=y
          CONFIG_mipsel=y
          CONFIG_ARCH="mipsel"
          CONFIG_TARGET_ROOTFS_INITRAMFS=y
          CONFIG_TARGET_INITRAMFS_COMPRESSION_LZMA=y
          CONFIG_EXTERNAL_CPIO=""
          CONFIG_TARGET_ROOTFS_SQUASHFS=y
          CONFIG_TARGET_SQUASHFS_BLOCK_SIZE=256
          CONFIG_TARGET_UBIFS_FREE_SPACE_FIXUP=y
          CONFIG_TARGET_UBIFS_JOURNAL_SIZE=""
          CONFIG_JSON_OVERVIEW_IMAGE_INFO=y
          CONFIG_SIGNED_PACKAGES=y
          CONFIG_SIGNATURE_CHECK=y
          CONFIG_SHADOW_PASSWORDS=y
          CONFIG_KERNEL_BUILD_USER=""
          CONFIG_KERNEL_BUILD_DOMAIN=""
          CONFIG_KERNEL_PRINTK=y
          CONFIG_KERNEL_SWAP=y
          CONFIG_KERNEL_DEBUG_FS=y
          CONFIG_KERNEL_KALLSYMS=y
          CONFIG_KERNEL_DEBUG_KERNEL=y
          CONFIG_KERNEL_DEBUG_INFO=y
          CONFIG_KERNEL_AIO=y
          CONFIG_KERNEL_IO_URING=y
          CONFIG_KERNEL_FHANDLE=y
          CONFIG_KERNEL_FANOTIFY=y
          CONFIG_KERNEL_MAGIC_SYSRQ=y
          CONFIG_KERNEL_COREDUMP=y
          CONFIG_KERNEL_ELF_CORE=y
          CONFIG_KERNEL_PRINTK_TIME=y
          CONFIG_KERNEL_KEYS=y
          CONFIG_KERNEL_CGROUPS=y
          CONFIG_KERNEL_FREEZER=y
          CONFIG_KERNEL_CGROUP_PIDS=y
          CONFIG_KERNEL_CGROUP_RDMA=y
          CONFIG_KERNEL_CGROUP_BPF=y
          CONFIG_KERNEL_CPUSETS=y
          CONFIG_KERNEL_CGROUP_CPUACCT=y
          CONFIG_KERNEL_RESOURCE_COUNTERS=y
          CONFIG_KERNEL_MM_OWNER=y
          CONFIG_KERNEL_MEMCG=y
          CONFIG_KERNEL_MEMCG_SWAP=y
          CONFIG_KERNEL_MEMCG_KMEM=y
          CONFIG_KERNEL_CGROUP_SCHED=y
          CONFIG_KERNEL_FAIR_GROUP_SCHED=y
          CONFIG_KERNEL_CFS_BANDWIDTH=y
          CONFIG_KERNEL_RT_GROUP_SCHED=y
          CONFIG_KERNEL_BLK_CGROUP=y
          CONFIG_KERNEL_BLK_DEV_THROTTLING=y
          CONFIG_KERNEL_NAMESPACES=y
          CONFIG_KERNEL_UTS_NS=y
          CONFIG_KERNEL_IPC_NS=y
          CONFIG_KERNEL_USER_NS=y
          CONFIG_KERNEL_PID_NS=y
          CONFIG_KERNEL_NET_NS=y
          CONFIG_KERNEL_DEVPTS_MULTIPLE_INSTANCES=y
          CONFIG_KERNEL_POSIX_MQUEUE=y
          CONFIG_KERNEL_SECCOMP_FILTER=y
          CONFIG_KERNEL_SECCOMP=y
          CONFIG_KERNEL_IP_MROUTE=y
          CONFIG_KERNEL_IP_MROUTE_MULTIPLE_TABLES=y
          CONFIG_KERNEL_IP_PIMSM_V1=y
          CONFIG_KERNEL_IP_PIMSM_V2=y
          CONFIG_KERNEL_IPV6=y
          CONFIG_KERNEL_IPV6_MULTIPLE_TABLES=y
          CONFIG_KERNEL_IPV6_SUBTREES=y
          CONFIG_KERNEL_IPV6_MROUTE=y
          CONFIG_KERNEL_IPV6_MROUTE_MULTIPLE_TABLES=y
          CONFIG_KERNEL_IPV6_PIMSM_V2=y
          CONFIG_KERNEL_IPV6_SEG6_LWTUNNEL=y
          CONFIG_KERNEL_SQUASHFS_FRAGMENT_CACHE_SIZE=3
          CONFIG_KERNEL_CC_OPTIMIZE_FOR_PERFORMANCE=y
          CONFIG_IPV6=y
          CONFIG_USE_SSTRIP=y
          CONFIG_SSTRIP_ARGS="-z"
          CONFIG_PKG_CHECK_FORMAT_SECURITY=y
          CONFIG_PKG_ASLR_PIE_REGULAR=y
          CONFIG_PKG_CC_STACKPROTECTOR_REGULAR=y
          CONFIG_KERNEL_CC_STACKPROTECTOR_REGULAR=y
          CONFIG_KERNEL_STACKPROTECTOR=y
          CONFIG_PKG_FORTIFY_SOURCE_1=y
          CONFIG_PKG_RELRO_FULL=y
          CONFIG_SECCOMP=y
          CONFIG_BINARY_FOLDER=""
          CONFIG_DOWNLOAD_FOLDER=""
          CONFIG_LOCALMIRROR=""
          CONFIG_AUTOREBUILD=y
          CONFIG_BUILD_SUFFIX=""
          CONFIG_TARGET_ROOTFS_DIR=""
          CONFIG_CCACHE_DIR=""
          CONFIG_EXTERNAL_KERNEL_TREE=""
          CONFIG_KERNEL_GIT_CLONE_URI=""
          CONFIG_BUILD_LOG_DIR=""
          CONFIG_EXTRA_OPTIMIZATION="-fno-caller-saves -fno-plt"
          CONFIG_TARGET_OPTIMIZATION="-Os -pipe -mno-branch-likely -mips32r2 -mtune=24kc"
          CONFIG_SOFT_FLOAT=y
          CONFIG_USE_MIPS16=y
          CONFIG_EXTRA_BINUTILS_CONFIG_OPTIONS=""
          CONFIG_EXTRA_GCC_CONFIG_OPTIONS=""
          CONFIG_MUSL_DISABLE_CRYPT_SIZE_HACK=y
          CONFIG_GDB=y
          CONFIG_USE_MUSL=y
          CONFIG_SSP_SUPPORT=y
          CONFIG_BINUTILS_VERSION_2_37=y
          CONFIG_BINUTILS_VERSION="2.37"
          CONFIG_GCC_VERSION="11.2.0"
          CONFIG_LIBC="musl"
          CONFIG_TARGET_SUFFIX="musl"
          CONFIG_TARGET_PREINIT_SUPPRESS_STDERR=y
          CONFIG_TARGET_PREINIT_TIMEOUT=2
          CONFIG_TARGET_PREINIT_IFNAME=""
          CONFIG_TARGET_PREINIT_IP="192.168.1.1"
          CONFIG_TARGET_PREINIT_NETMASK="255.255.255.0"
          CONFIG_TARGET_PREINIT_BROADCAST="192.168.1.255"
          CONFIG_TARGET_INIT_PATH="/usr/sbin:/usr/bin:/sbin:/bin"
          CONFIG_TARGET_INIT_ENV=""
          CONFIG_TARGET_INIT_CMD="/sbin/init"
          CONFIG_TARGET_INIT_SUPPRESS_STDERR=y
          CONFIG_PER_FEED_REPO=y
          CONFIG_FEED_packages=y
          CONFIG_FEED_luci=y
          CONFIG_FEED_routing=y
          CONFIG_FEED_telephony=y
          CONFIG_PACKAGE_firewall=y
          CONFIG_PACKAGE_libc=y
          CONFIG_PACKAGE_libgcc=y
          CONFIG_PACKAGE_libpthread=y
          CONFIG_PACKAGE_opkg=y
          CONFIG_PACKAGE_procd-seccomp=y
          CONFIG_PACKAGE_rpcd=y
          CONFIG_PACKAGE_rpcd-mod-file=y
          CONFIG_PACKAGE_rpcd-mod-iwinfo=y
          CONFIG_ZABBIX_NOSSL=y
          CONFIG_ZABBIX_POSTGRESQL=y
          CONFIG_PACKAGE_libiwinfo-data=y
          CONFIG_PACKAGE_kmod-ipt-conntrack=y
          CONFIG_PACKAGE_kmod-ipt-core=y
          CONFIG_PACKAGE_kmod-ipt-nat=y
          CONFIG_PACKAGE_kmod-nf-conntrack=y
          CONFIG_PACKAGE_kmod-nf-conntrack6=y
          CONFIG_PACKAGE_kmod-nf-ipt=y
          CONFIG_PACKAGE_kmod-nf-nat=y
          CONFIG_PACKAGE_kmod-nf-reject=y
          CONFIG_GOLANG_EXTERNAL_BOOTSTRAP_ROOT=""
          CONFIG_GOLANG_BUILD_CACHE_DIR=""
          CONFIG_PACKAGE_libiwinfo-lua=y
          CONFIG_PACKAGE_lua=y
          CONFIG_PACKAGE_libip4tc=y
          CONFIG_PACKAGE_libip6tc=y
          CONFIG_PACKAGE_libiptext=y
          CONFIG_PACKAGE_libiptext6=y
          CONFIG_PACKAGE_libxtables=y
          CONFIG_IPTABLES_NFTABLES=y
          CONFIG_PACKAGE_libopenssl=y
          CONFIG_OPENSSL_WITH_ASM=y
          CONFIG_OPENSSL_WITH_DEPRECATED=y
          CONFIG_OPENSSL_WITH_ERROR_MESSAGES=y
          CONFIG_OPENSSL_WITH_TLS13=y
          CONFIG_OPENSSL_WITH_SRP=y
          CONFIG_OPENSSL_WITH_CMS=y
          CONFIG_OPENSSL_WITH_CHACHA_POLY1305=y
          CONFIG_OPENSSL_PREFER_CHACHA_OVER_GCM=y
          CONFIG_OPENSSL_WITH_PSK=y
          CONFIG_OPENSSL_ENGINE=y
          CONFIG_PACKAGE_libopenssl-conf=y
          CONFIG_PACKAGE_libblobmsg-json=y
          CONFIG_PACKAGE_libiwinfo=y
          CONFIG_PACKAGE_libjson-c=y
          CONFIG_PACKAGE_liblua=y
          CONFIG_PACKAGE_liblucihttp=y
          CONFIG_PACKAGE_liblucihttp-lua=y
          CONFIG_PACKAGE_libnl-tiny=y
          CONFIG_PACKAGE_libubox=y
          CONFIG_PACKAGE_libubus=y
          CONFIG_PACKAGE_libubus-lua=y
          CONFIG_PACKAGE_libuci=y
          CONFIG_PACKAGE_libuclient=y
          CONFIG_PACKAGE_libustream-openssl=y
          CONFIG_PACKAGE_rpcd-mod-luci=y
          CONFIG_PACKAGE_rpcd-mod-rrdns=y
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-ssl-openssl=y
          CONFIG_PACKAGE_luci-base=y
          CONFIG_LUCI_JSMIN=y
          CONFIG_LUCI_CSSTIDY=y
          CONFIG_PACKAGE_luci-mod-admin-full=y
          CONFIG_PACKAGE_luci-mod-network=y
          CONFIG_PACKAGE_luci-mod-status=y
          CONFIG_PACKAGE_luci-mod-system=y
          CONFIG_PACKAGE_luci-app-firewall=y
          CONFIG_PACKAGE_luci-app-opkg=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          CONFIG_PACKAGE_luci-proto-ipv6=y
          CONFIG_PACKAGE_luci-proto-ppp=y
          CONFIG_PACKAGE_luci-lib-base=y
          CONFIG_PACKAGE_luci-lib-ip=y
          CONFIG_PACKAGE_luci-lib-jsonc=y
          CONFIG_PACKAGE_luci-lib-nixio=y
          CONFIG_PACKAGE_luci-lib-nixio_notls=y
          CONFIG_PACKAGE_cgi-io=y
          CONFIG_PACKAGE_uhttpd=y
          CONFIG_PACKAGE_uhttpd-mod-ubus=y
          CONFIG_PACKAGE_uclient-fetch=y
          CONFIG_PACKAGE_libjson-script=y
          CONFIG_PACKAGE_openssl-util=y
          CONFIG_STRACE_NONE=y
          EOF
          #
          # ===============================================================
          # 
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h
      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true
      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
